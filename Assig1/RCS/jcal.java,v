head	1.25;
access;
symbols;
locks;
comment	@# @;


1.25
date	2015.01.21.03.26.59;	author -;	state -;
branches;
next	1.24;

1.24
date	2015.01.20.23.39.44;	author -;	state -;
branches;
next	1.23;

1.23
date	2015.01.20.23.39.30;	author -;	state -;
branches;
next	1.22;

1.22
date	2015.01.20.23.35.41;	author -;	state -;
branches;
next	1.21;

1.21
date	2015.01.20.23.33.53;	author -;	state -;
branches;
next	1.20;

1.20
date	2015.01.20.23.33.38;	author -;	state -;
branches;
next	1.19;

1.19
date	2015.01.20.23.32.09;	author -;	state -;
branches;
next	1.18;

1.18
date	2015.01.20.23.31.57;	author -;	state -;
branches;
next	1.17;

1.17
date	2015.01.20.23.29.40;	author -;	state -;
branches;
next	1.16;

1.16
date	2015.01.20.23.27.36;	author -;	state -;
branches;
next	1.15;

1.15
date	2015.01.20.23.25.52;	author -;	state -;
branches;
next	1.14;

1.14
date	2015.01.20.23.25.24;	author -;	state -;
branches;
next	1.13;

1.13
date	2015.01.20.23.24.38;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.01.20.23.24.16;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.01.20.23.16.47;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.01.20.23.15.12;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.01.20.23.06.43;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.01.20.22.59.27;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.01.20.22.47.54;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.01.20.22.47.17;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.01.20.22.45.43;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.01.20.22.45.23;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.01.20.22.42.59;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.01.20.22.40.51;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.01.20.22.37.37;	author -;	state -;
branches;
next	;


desc
@@


1.25
log
@-
@
text
@//Adam Paz
//apa10@@ucsc.edu
// $Id: jcal.java,v 1.24 2015-01-20 15:39:44-08 - - $

import java.util.*;
import java.io.*;
import static java.lang.System.*;
import java.text.*;

class jcal {
   static final int MONTHS_IN_YEAR = 12;
   static final int WEEKS_IN_MONTH =  6;
   static final int DAYS_IN_WEEK   =  7;
   static Locale locale;
   static final GregorianCalendar CHANGE_DATE
               = new GregorianCalendar (1752, Calendar.SEPTEMBER, 14);


   public static void main (String[] args) {
      int[][] month = new int[WEEKS_IN_MONTH][DAYS_IN_WEEK]; 
      int calmonth=12, calyear=10000, k= 0;
      GregorianCalendar cal = new GregorianCalendar();
      cal.setGregorianChange (CHANGE_DATE.getTime());
         try{
            if(args.length>0){
               if (args[0].substring(0,1).equals("-")){
                  locale = new Locale( args[0].substring(1,3));
                  k = 1;
               }
            }
            if (args.length == k+1){
               calyear =  Integer.parseInt(args[k]);
               cal = new GregorianCalendar(calyear, 0, 1);
               make_year(calyear, month, cal); 
            }    
            else if (args.length == k+2){
               calmonth =  Integer.parseInt(args[k])-1;
               calyear=  Integer.parseInt(args[k+1]);
               cal = new GregorianCalendar(calyear, calmonth, 1);
               to_month(calmonth, month, cal);
            }
            else {
              calmonth = cal.get (GregorianCalendar.MONTH);
              calyear  = cal.get (GregorianCalendar.YEAR);
              cal = new GregorianCalendar(calyear, calmonth, 1);
              to_month(calmonth, month, cal);
           }
        }catch (NumberFormatException error) {
               misclib.die("illegal month value: use 1-12%n");
               misclib.die("illegal year value: use 1-9999%n");
            System.exit(1);
        }
        System.exit(0);
   }

   static void make_year (int calyear, int[][] month,
                         GregorianCalendar cal){
        int [][][] year = new int[MONTHS_IN_YEAR][WEEKS_IN_MONTH]
                               [DAYS_IN_WEEK];
        String[] weekdays = new String[7];
        String[] names = new String[12];
        int calmonth = 0, weeks =0;
        out.printf("%35tY%n%n",cal);
        for(int monthOfYear =0; monthOfYear< MONTHS_IN_YEAR;
                                monthOfYear++){
           cal = new GregorianCalendar(calyear, monthOfYear, 1);
           String moname = String.format(locale, "%tB",cal);
           make_month(month, monthOfYear, cal, weekdays);
           names[monthOfYear] = moname;
           for (int week = 0; week< 6; week++) {
              for (int day = 0; day < 7; ++day) {
                 year[monthOfYear][week][day] = month[week][day];
              }
           }
        }
             print_year(year, names ,weekdays, cal);
   }
   static void print_year(int[][][] year, String[] names, 
                          String[] weekdays, GregorianCalendar cal){
      int mo = 0, columns = 3, lines = 4;
      for(int line = 0; line<lines; line++){
         out.printf("%14s%23s%21s%n", names[mo], names[mo+1],
                    names[mo +2]);
            for(int incr =0; incr<columns; incr++){
               for (int i = 0; i<DAYS_IN_WEEK; i++){
                  String dayname = weekdays[i];
                  out.printf(i == 0 ? "%2s": "%3s",
                             twoLetter(dayname, 2));
               }
            out.printf("   ");
         }
         out.printf("%n");
         for(int weeks = 0; weeks<WEEKS_IN_MONTH; weeks++){
            int months = mo;
            for(int column = 0; column<3; column++){
               months++;
               for(int days = 0; days< DAYS_IN_WEEK; days++){
                   if(year[months-1][weeks][days] == 0)
                      out.printf (days == 0 ? "%2s" : "%3s", " ");
                   else
                       out.printf (days == 0 ? "%2d" : "%3d",
                                  year[months-1][weeks][days]); 
                   }
                out.printf(column == 2 ? "%n" : "   ");
                }
             }
       out.printf("%n");
       mo = mo +3;
         }
   out.printf("%n");
   }
 
   static void to_month(int calmonth,int[][] month, 
                           GregorianCalendar cal){
      int i =0;
      String[] weekdays = new String[7];
      String moname = "month name";
      moname = String.format(locale,"%tB",cal);
      make_month(month, calmonth, cal, weekdays); 
      print_month(moname,weekdays,month, cal);
    }

    static void print_month(String moname, String[] weekdays,
                           int[][] month, GregorianCalendar cal){
       out.printf(locale, "%11tB%5tY%n", cal, cal );
       for (int i = 0; i<DAYS_IN_WEEK; i++){
          String dayname = weekdays[i];
          out.printf(i == 0 ? "%2s": "%3s",twoLetter(dayname, 2));
       }
       out.printf("%n");

       for (int[] week: month) {
          for (int day = 0; day < week.length; ++day) {
             if(week[day] == 0)
                 out.printf (day == 0 ? "%2s" : "%3s", " ");
             else
                out.printf (day == 0 ? "%2d" : "%3d", week[day]);
             
          }
          out.printf("%n");
        }
   }

   static String twoLetter (String dayname, int length){
   //taken frommackey's misc/calnames
      return length > dayname.length ()
      ? dayname
      : dayname.substring (0, length);
   }

   static void make_month(int[][] month, int calmonth, 
                          GregorianCalendar cal,String[] weekdays){
      int i =0;

      for(int p = 0; p<WEEKS_IN_MONTH; p++){
         for(int k = 0; k<DAYS_IN_WEEK; k++){
            month[p][k] = 0;
         }
      }

      while (calmonth == cal.get (GregorianCalendar.MONTH)) {
           int calday = cal.get (GregorianCalendar.DAY_OF_MONTH);
           int weekday = cal.get (GregorianCalendar.DAY_OF_WEEK)-1;
           int weekNum = cal.get(GregorianCalendar.WEEK_OF_MONTH);
           String dayname = String.format (locale,"%tA",cal);
        
           if(weekday ==i ) {
              weekdays[i] = twoLetter(dayname, 2);
              i++;
           }
        
           month[weekNum-1][weekday] = calday;
           cal.add(GregorianCalendar.DAY_OF_MONTH, 1);
        }
    }
}
@


1.24
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.23 2015-01-20 15:39:30-08 - - $
d36 1
a36 1
            else if(args.length == k+2){
d42 1
a42 1
            else{
d55 2
a56 1
   static void make_year(int calyear, int[][] month,
d112 1
d125 1
a125 1
       out.printf(locale, "%11s%5tY%n", moname, cal );
a129 1

a139 1

d144 1
a144 1
   static String twoLetter(String dayname, int length){
@


1.23
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.22 2015-01-20 15:35:41-08 - - $
a48 2
//               misclib.die("illegal year value: use 1-9999%n");
            if(calmonth == 12)
a49 1
            else
@


1.22
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.21 2015-01-20 15:33:53-08 - - $
d50 1
a50 1
            if(calmonth <1 || calmonth > 12)
@


1.21
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.20 2015-01-20 15:33:38-08 - - $
d21 1
a21 1
      int calmonth=13, calyear=10000, k= 0;
d50 1
a50 1
            if(calmonth <0 || calmonth > 12)
@


1.20
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.19 2015-01-20 15:32:09-08 - - $
d52 1
a52 1
            else{
@


1.19
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.18 2015-01-20 15:31:57-08 - - $
d49 1
a49 3
            out.printf("%d : %d", calmonth, calyear);
            if(calyear<1 ||  calyear > 9999)
               misclib.die("illegal year value: use 1-9999%n");
d52 2
@


1.18
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.17 2015-01-20 15:29:40-08 - - $
d50 1
a50 1
            if( ||calyear<1 ||  calyear > 9999)
@


1.17
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.16 2015-01-20 15:27:36-08 - - $
d21 1
a21 1
      int calmonth=2, calyear=2, k= 0;
d50 2
a51 2
            if(calyear<0 ||  calyear > 9999)
              misclib.die("illegal year value: use 1-9999%n");
d53 1
a53 1
              misclib.die("illegal month value: use 1-12%n");
@


1.16
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.15 2015-01-20 15:25:52-08 - - $
d49 2
a50 1
              out.printf("%d : %d", calmonth, calyear);
d52 1
@


1.15
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.14 2015-01-20 15:25:24-08 - - $
d49 3
a51 3
            out.printf("%d:%d",calyear,calmonth);
              misclib.die("cal: illegal year value: use 1-9999%n");
              misclib.die("cal: illegal month value: use 1-12%n");
@


1.14
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.13 2015-01-20 15:24:38-08 - - $
d49 1
a49 1
            out.prinf("%d:%d",calyear,calmonth);
@


1.13
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.12 2015-01-20 15:24:16-08 - - $
d51 1
a51 1
               misclib.die("cal: illegal month value: use 1-12%n");
@


1.12
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.11 2015-01-20 15:16:47-08 - - $
a49 1
            if(calyear > 9999 || calyear <1)   
a50 1
            if(calmonth > 12 || calmonth < 1)
@


1.11
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.10 2015-01-20 15:15:12-08 - - $
d51 1
a51 1
              err.printf("cal: illegal year value: use 1-9999%n");
d53 1
a53 1
               err.printf("cal: illegal month value: use 1-12%n");
@


1.10
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.9 2015-01-20 15:06:43-08 - - $
d49 1
@


1.9
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.8 2015-01-20 14:59:27-08 - - $
d53 1
d115 1
a115 1
        int i =0;
a125 1

@


1.8
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.7 2015-01-20 14:47:54-08 - - $
d153 2
a154 2
   static void make_month(int[][] month, int calmonth, GregorianCalendar cal,
                          String[] weekdays){
@


1.7
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.6 2015-01-20 14:47:17-08 - - $
d26 4
a29 4
            if (args[0].substring(0,1).equals("-")){
               Locale locale = new Locale( args[0].substring(1,3));
               k = 1;
            }
d37 2
a38 2
               calmonth =  Integer.parseInt(args[0])-1;
               calyear=  Integer.parseInt(args[1]);
a158 1
	    out.printf("%d %d\n", p, k);
a173 1
           out.printf("%d", weekday);
@


1.6
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.5 2015-01-20 14:45:43-08 - - $
a163 4
      out.println("MADE IT");

      out.printf("%d %d\n", cal.get(GregorianCalendar.MONTH), calmonth);

a169 1
           out.printf("%d", weekday);
@


1.5
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.4 2015-01-20 14:45:23-08 - - $
d40 1
a40 1
               to_month(calyear, month, cal);
@


1.4
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.3 2015-01-20 14:42:59-08 - - $
d166 1
a166 1
      out.printf("%d %d\n", cal.get(GregorianCalendar.MONTH, calmonth);
@


1.3
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.2 2015-01-20 14:40:51-08 - - $
d166 2
@


1.2
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.1 2015-01-20 14:37:37-08 - - $
d164 2
d171 7
d179 4
a182 9
              if(weekday ==i ) {
                 weekdays[i] = twoLetter(dayname, 2);
                 i++;
              }
                 out.printf("%d", weekday);
                 month[weekNum-1][weekday] = calday;
                 cal.add(GregorianCalendar.DAY_OF_MONTH, 1);
              }
                 }
@


1.1
log
@-
@
text
@d3 1
a3 1
// $Id: jcal.java,v 1.2 2013-03-27 21:24:26-07 - - $
d121 1
d125 1
d130 1
d132 1
d141 1
d144 2
a145 1
        }
d152 1
d159 1
@
