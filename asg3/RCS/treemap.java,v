head	1.12;
access;
symbols;
locks;
comment	@# @;


1.12
date	2015.02.17.21.30.49;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.02.17.21.20.00;	author -;	state -;
branches;
next	1.10;

1.10
date	2015.02.17.21.19.48;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.02.17.21.05.35;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.02.17.20.57.49;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.02.17.20.39.23;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.02.17.20.35.52;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.02.17.20.04.28;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.17.20.03.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.17.18.53.53;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.02.17.18.53.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.02.17.18.52.29;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@import static java.lang.System.*;

class treemap {

   class tree {
      String key;
      String value;
      tree left;
      tree right;
   }
   tree root = null;

   public String get (String key) {
      tree curr = root;
      while (true) {
         if (key.compareTo(curr.key) < 0) {
            if (curr.left != null) curr = curr.left;
               else return null;
               if (curr.key.equals(key)) return curr.value;
         }
        
         else if (key.compareTo(curr.key) > 0) {
            if (curr.right != null) curr = curr.right;
               else return null;
               if (curr.key.equals(key)) return curr.value;
        
         } else if (curr.key.equals(key)) {
            return curr.value;
         }
      }
   }
      
   public String put (String key, String value) {
      if (root == null) {
         tree newTree = new tree();
         newTree.key = key;
         newTree.value = value;
         root = newTree;
      }
      tree curr = root;
      while (true) {
         if (key.compareTo(curr.key) < 0) { 
            if (curr.left == null) {
               tree newTree = new tree(); 
               newTree.key = key;
               newTree.value = value;
               curr.left = newTree;
            } else {
            curr=curr.left;
            if(key.equals(curr.key))return curr.value;
            }
         }
         else if (key.compareTo(curr.key) > 0) {
            if (curr.right == null) {
               tree newTree = new tree();
               newTree.key = key;
               newTree.value = value;
               curr.right = newTree;
            } else {
            curr = curr.right;
                if (key.equals(curr.key)){
                      tree temp = curr;
                      curr.value = value;
                      return temp.value;
                }
            }
         }
         else if (curr.key.equals(key)) {
            curr.value = value;
            return curr.value;
         }
      }
   } //end put function 

   public void debug_tree () {
      debug_tree_recur (root, 0);
   }

   private void debug_tree_recur (tree node, int depth) {
      if(node != null){
         debug_tree_recur(node.left, depth+1);
         out.printf( "%3d \"%s\" \"%s\" %s %s%n", depth, node.key,
                                 node.value, node.left, node.right);
         debug_tree_recur(node.right, depth+1);
      }

   }
}
@


1.11
log
@-
@
text
@d85 2
a87 2

}
@


1.10
log
@-
@
text
@d62 1
a62 1
                      temp = curr;
@


1.9
log
@-
@
text
@d61 5
a65 1
            if (key.equals(curr.key))return curr.value;
@


1.8
log
@-
@
text
@a12 3
   //java.util.TreeMap <String, String> tree
   //      = new java.util.TreeMap <String, String> ();
   
d78 2
a79 1
         out.printf( "%3d \"%s\" \"%s\" %s %s%n", depth, node.key, node.value, node.left, node.right);
@


1.7
log
@-
@
text
@d21 1
a22 1
            //else return null;
d27 1
a28 1
            //else return null;
a32 1
        // return null;
@


1.6
log
@-
@
text
@d33 1
a33 1
         return null;
@


1.5
log
@-
@
text
@d22 1
a22 1
            else return null;
d28 1
a28 1
            else return null;
@


1.4
log
@-
@
text
@d64 1
a64 1
            curr = curr.left;
@


1.3
log
@-
@
text
@d33 1
a33 1
         //return null;
d52 3
a55 1
            return curr.value;
d63 3
a66 1
            return curr.value;
d80 4
d87 1
@


1.2
log
@-
@
text
@a45 1
         out.printf("%s\n", "yo");
@


1.1
log
@-
@
text
@d45 2
a46 1
     // while (true) {
d69 1
a69 1
     // }
@
