head	1.33;
access;
symbols;
locks;
comment	@ * @;


1.33
date	2015.02.26.20.37.44;	author -;	state -;
branches;
next	1.32;

1.32
date	2015.02.26.20.33.29;	author -;	state -;
branches;
next	1.31;

1.31
date	2015.02.26.20.32.37;	author -;	state -;
branches;
next	1.30;

1.30
date	2015.02.26.20.31.35;	author -;	state -;
branches;
next	1.29;

1.29
date	2015.02.26.20.29.31;	author -;	state -;
branches;
next	1.28;

1.28
date	2015.02.26.20.24.13;	author -;	state -;
branches;
next	1.27;

1.27
date	2015.02.26.20.21.28;	author -;	state -;
branches;
next	1.26;

1.26
date	2015.02.26.20.20.09;	author -;	state -;
branches;
next	1.25;

1.25
date	2015.02.26.20.19.37;	author -;	state -;
branches;
next	1.24;

1.24
date	2015.02.26.20.00.26;	author -;	state -;
branches;
next	1.23;

1.23
date	2015.02.26.19.59.48;	author -;	state -;
branches;
next	1.22;

1.22
date	2015.02.26.19.53.46;	author -;	state -;
branches;
next	1.21;

1.21
date	2015.02.26.19.53.35;	author -;	state -;
branches;
next	1.20;

1.20
date	2015.02.26.19.51.12;	author -;	state -;
branches;
next	1.19;

1.19
date	2015.02.24.04.01.36;	author -;	state -;
branches;
next	1.18;

1.18
date	2015.02.24.03.50.19;	author -;	state -;
branches;
next	1.17;

1.17
date	2015.02.24.03.43.35;	author -;	state -;
branches;
next	1.16;

1.16
date	2015.02.24.03.34.24;	author -;	state -;
branches;
next	1.15;

1.15
date	2015.02.24.03.25.47;	author -;	state -;
branches;
next	1.14;

1.14
date	2015.02.24.03.25.31;	author -;	state -;
branches;
next	1.13;

1.13
date	2015.02.24.03.25.15;	author -;	state -;
branches;
next	1.12;

1.12
date	2015.02.24.03.24.18;	author -;	state -;
branches;
next	1.11;

1.11
date	2015.02.24.03.23.40;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.27.20.12.24;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.05.01.20.22.44;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.02.16.01.17.42;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.02.12.03.17.45;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.02.12.03.17.19;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.02.12.03.15.55;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.02.12.03.12.42;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.11.02.02.34.52;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.02.21.22.57.52;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.02.15.04.32.33;	author -;	state -;
branches;
next	;


desc
@@


1.33
log
@-
@
text
@// $Id: queue.c,v 1.32 2015-02-26 12:33:29-08 - - $
//Adam Paz
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"


typedef struct queue_node queue_node;
struct queue_node {
   queue_item_t item;
   queue_node *link;
};

struct queue {
   queue_node *front;
   queue_node *rear;
};

queue *new_queue (void) {
    queue *this = malloc (sizeof(queue));
    assert (this != NULL);
    this->front = NULL;
    this->rear = NULL;
    return this;
}

void free_queue (queue *this) {
   assert (isempty_queue (this));
   free (this);
}

void insert_queue (queue *this, queue_item_t item) {
    queue_node *node = malloc (sizeof(queue));
    node->item = item;    
    if (this->front == NULL){
        this->front = node;
   } else this->rear->link = node;
    this->rear = node;
    }

queue_item_t remove_queue (queue *this) {
   queue_item_t removed =  this->front->item; 
   queue_node *tmp = this->front;
   this->front = this->front->link;
   free(tmp);
   return removed;
}

bool isempty_queue (queue *this) {
   return this->front == NULL;
}

@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.31 2015-02-26 12:32:37-08 - - $
d32 1
a32 1
   //free (this);
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.30 2015-02-26 12:31:35-08 - - $
d46 1
a46 1
   //queue_node *tmp = this->front;
d48 1
a48 1
   //free(tmp);
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.29 2015-02-26 12:29:31-08 - - $
d32 1
a32 1
   free (this);
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.28 2015-02-26 12:24:13-08 - - $
d46 1
a46 1
   queue_node *tmp = this->front;
d48 1
a48 1
   free(tmp);
@


1.28
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.27 2015-02-26 12:21:28-08 - - $
a44 1
   if (!isempty_queue(this)){
a49 1
   }
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.26 2015-02-26 12:20:09-08 - - $
d47 1
a47 1
   //queue_node *tmp = this->front;
d49 1
a49 1
  // free(tmp);
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.25 2015-02-26 12:19:37-08 - - $
d45 1
d51 1
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.24 2015-02-26 12:00:26-08 - - $
d46 1
a46 1
   queue_node *tmp = this->front;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.23 2015-02-26 11:59:48-08 - - $
d48 1
a48 1
   free(tmp);
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.22 2015-02-26 11:53:46-08 - - $
d46 1
a46 1
   queue_node tmp = this->front;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.21 2015-02-26 11:53:35-08 - - $
d31 2
a32 4
   //assert (isempty_queue (this));
   queue_node *tmp = this->front;
   this->front = this->front->link;
   free (tmp);
d46 1
d48 1
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.20 2015-02-26 11:51:12-08 - - $
d32 1
a32 1
   node *tmp = this->front;
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.19 2015-02-23 20:01:36-08 - - $
d32 3
a34 1
   free (this);
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.18 2015-02-23 19:50:19-08 - - $
d31 1
a31 1
   assert (isempty_queue (this));
@


1.18
log
@-
@
text
@d1 2
a2 2
// $Id: queue.c,v 1.17 2015-02-23 19:43:35-08 - - $

@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.16 2015-02-23 19:34:24-08 - - $
d38 4
a41 3
    if (this->front == NULL) this->front = node;
          else this->front->link = node;
    this->rear = node;    
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.15 2015-02-23 19:25:47-08 - - $
a45 1
   assert (! isempty_queue (this));   
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.14 2015-02-23 19:25:31-08 - - $
a9 1
#define STUBPRINTF(...) fprintf (stderr, __VA_ARGS__);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.13 2015-02-23 19:25:15-08 - - $
a42 1
}
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.12 2015-02-23 19:24:18-08 - - $
d39 1
a39 1
    if (front == NULL) this->front = node;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.11 2015-02-23 19:23:40-08 - - $
d26 2
a27 2
    this-> capacity = 16;
    this->size = 0;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.10 2014-02-27 12:12:24-08 - - $
d46 1
a46 1
   queue_item_t removed =  this_front->item; 
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.9 2013-05-01 13:22:44-07 - - $
d24 5
a28 2
   STUBPRINTF ("return NULL\n");
   return NULL;
d37 6
a42 1
   STUBPRINTF ("item = \"%s\"\n", item);
d46 4
a49 3
   assert (! isempty_queue (this));
   STUBPRINTF ("return NULL\n");
   return NULL;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.8 2013-02-15 17:17:42-08 - - $
d34 1
a34 1
   STUBPRINTF ("item =\n\t\"%s\"\n", item);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: queue.c,v 1.7 2013-02-11 19:17:45-08 - - $
a11 3
static char *queue_tag = "struct queue";
static char *queue_node_tag = "struct queue_node";

a13 1
   char *tag;
a18 1
   char *tag;
a28 1
   assert (is_queue (this));
a29 1
   memset (this, 0, sizeof (queue));
a33 1
   assert (is_queue (this));
a37 1
   assert (is_queue (this));
a43 1
   assert (is_queue (this));
a46 4
bool is_queue (queue *this) {
   return this != NULL && this->tag == queue_tag;
}

@


1.7
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.6 2013-02-11 19:17:19-08 - - $ */
@


1.6
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.5 2013-02-11 19:15:55-08 - - $ */
d36 1
a36 1
   memset (queue, 0, sizeof (struct queue));
@


1.5
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.4 2013-02-11 19:12:42-08 - - $ */
d13 1
a13 1
static char *queuenode_tag = "struct queuenode";
d15 2
a16 3
typedef struct queuenode queuenode;

struct queuenode {
d19 1
a19 1
   queuenode_ref link;
d24 2
a25 2
   queuenode_ref front;
   queuenode_ref rear;
@


1.4
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.3 2012-11-01 19:34:52-07 - - $ */
d15 1
a15 1
typedef struct queuenode *queuenode_ref;
d34 3
a36 3
void free_queue (queue *queue) {
   assert (is_queue (queue));
   assert (isempty_queue (queue));
d38 1
a38 1
   free (queue);
d41 2
a42 2
void insert_queue (queue *queue, queue_item_t item) {
   assert (is_queue (queue));
d46 3
a48 3
queue_item_t remove_queue (queue *queue) {
   assert (is_queue (queue));
   assert (! isempty_queue (queue));
d53 3
a55 3
bool isempty_queue (queue *queue) {
   assert (is_queue (queue));
   return queue->front == NULL;
d58 2
a59 2
bool is_queue (queue *queue) {
   return queue != NULL && queue->tag == queue_tag;
@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.2 2012-02-21 14:57:52-08 - - $ */
d29 1
a29 1
queue_ref new_queue (void) {
d34 1
a34 1
void free_queue (queue_ref queue) {
d41 1
a41 1
void insert_queue (queue_ref queue, queue_item_t item) {
d46 1
a46 1
queue_item_t remove_queue (queue_ref queue) {
d53 1
a53 1
bool isempty_queue (queue_ref queue) {
d58 1
a58 1
bool is_queue (queue_ref queue) {
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.1 2012-02-14 20:32:33-08 - - $ */
a54 1
   // LINTED (assignment of 32-bit integer to 8-bit integer)
a58 1
   // LINTED (assignment of 32-bit integer to 8-bit integer)
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.2 2012-02-14 20:32:06-08 - - $ */
d55 1
d60 1
@
