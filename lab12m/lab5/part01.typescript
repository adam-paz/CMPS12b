Script started on Mon 09 Feb 2015 03:05:34 PM PST
You are currently using 61% (623.9 MiB) of your 1.0 GiB quota.
]0;apa10@be-linux40:lab5[apa10@be-linux40 lab5]$ mk uninit.c
CSOURCE=uninit.c EXECBIN=uninit
+ cid + uninit.c
+ checksource uninit.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit -lm
+ tee uninit.c.log
uninit.c: In function â€˜mainâ€™:
uninit.c:6:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
uninit.c:6:28: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
                            ^
uninit.c:8:11: warning: â€˜pointerâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("pointer=%p\n", pointer);
           ^
uninit.c:11:11: warning: â€˜fooâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("foo=%d\n", foo);
           ^
+ set +x
============================================================
]0;apa10@be-linux40:lab5[apa10@be-linux40 lab5]$ valgrind uninit
==22513== Memcheck, a memory error detector
==22513== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==22513== Using Valgrind-3.9.0 and LibVEX; rerun with -h for copyright info
==22513== Command: uninit
==22513== 
==22513== Conditional jump or move depends on uninitialised value(s)
==22513==    at 0x3813A45688: vfprintf (in /lib64/libc-2.12.so)
==22513==    by 0x3813A4F189: printf (in /lib64/libc-2.12.so)
==22513==    by 0x400544: main (uninit.c:8)
==22513== 
pointer=(nil)
==22513== Use of uninitialised value of size 8
==22513==    at 0x400549: main (uninit.c:9)
==22513== 
==22513== Invalid read of size 4
==22513==    at 0x400549: main (uninit.c:9)
==22513==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==22513== 
==22513== 
==22513== Process terminating with default action of signal 11 (SIGSEGV)
==22513==  Access not within mapped region at address 0x0
==22513==    at 0x400549: main (uninit.c:9)
==22513==  If you believe this happened as a result of a stack
==22513==  overflow in your program's main thread (unlikely but
==22513==  possible), you can try to increase the size of the
==22513==  main thread stack using the --main-stacksize= flag.
==22513==  The main thread stack size used in this run was 10485760.
==22513== 
==22513== HEAP SUMMARY:
==22513==     in use at exit: 0 bytes in 0 blocks
==22513==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==22513== 
==22513== All heap blocks were freed -- no leaks are possible
==22513== 
==22513== For counts of detected and suppressed errors, rerun with: -v
==22513== Use --track-origins=yes to see where uninitialised values come from
==22513== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 6 from 6)
Segmentation fault (core dumped)
]0;apa10@be-linux40:lab5[apa10@be-linux40 lab5]$ echo $?
139
]0;apa10@be-linux40:lab5[apa10@be-linux40 lab5]$ pstatus 139
pstatus: 0x008B TERMINATED 11: Segmentation fault (core dumped)
]0;apa10@be-linux40:lab5[apa10@be-linux40 lab5]$ exit
exit

Script done on Mon 09 Feb 2015 03:06:43 PM PST
